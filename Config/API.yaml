# This file is devoted to specifying an API between front-end and back-end.
# some notes about this file:
#   * data structures passed in the body of requests should be serialized in "yaml" format

account managing services:
  signup:
    service description: used to create a new user in the system.
    url: /accounts/signup
    http method: POST
    header: [] # non required
    parameters:
      - username
      - password
      - email
      - student number
      - first name
      - last name
    response:
      - error message # only if an error occurs

  login:
    service description: provides logging-in service.
    url: /accounts/login
    http method: POST
    header: [] # non required
    parameters:
      - username
      - password
    response:
      - error message # only if an error occurs
      - authentication token.

  logout:
    service description: logs-out the authenticated user. the given token is no longer valid.
    url: /accounts/logout
    http method: POST
    header: [token]
    parameters: [] # non required
    response:
      - error message # only if an error occurs

---

community managing services:
  get all communities:
    service description: returns the id,name key value of all available communities.
    url: /communities/all
    http method: GET
    header: [] # non required
    parameters: [] # non required
    response:
      - error message # only if an error occurs
      - array of community names

  create new community:
    service description: privileged users (most likely admins) can use this to crate a new community.
    url: /communities/new
    http method: POST
    header: [token] # only admin would be authorized
    parameters:
      - community name
    response:
      - error message # only if an error occurs

---

post management services:
  get basic information of a question:
    service description: returns basic info (info used to create a summary of a post i.e in home pages).
    url: /posts/questions/$id/basic_info # $id is a variable indicating the question's id
    http method: GET
    header: [] # non required
    parameters: [] # non required
    response:
      - error message # only if an error occurs
      - asker id
      - asker name
      - question id
      - question title
      - question body
      - number of downvotes
      - number of upvotes
      - date of issue

  get answers of a question:
    service description: returns an array of answer's basic infos.
    url: /posts/questions/$id/answers # $id is a variable indicating the question's id
    http method: GET
    header: [] # non required
    parameters: [] # non required
    reponse:
      - error message # only if an error occurs
      - array of basic information of answers

  get basic informations of an answer:
    service description: returns information required to create an answer's post.
    url: /posts/answers/$id # $id is a variable indicating the answer's id
    http method: GET
    header: [] # non required
    parameters: [] #non required
    response:
      - error message # only if an error occurs
      - answering user's id
      - answering user's username
      - answer's body
      - number of upvotes
      - number of downvotes
      - was answer helpful
      - date of issue

  # needs revisions. the aim is to make this service -
  # the only service used for retrieving a group of posts.
  get a group of posts:
    service description: |
      returns a cloud of posts, which can be sorted in a specific way. (not available)
      also there can be specified wether the posts should relate to a community/user. (not available)
      also one can specify an Interval by which the posts can be filtered. (not available)
      there is also a 0-based indexing property (from $start inclusive, until $end exclusive),
      by which you can repeat the same query but get a different interval of posts (index-wise). (not available)
      * note that the number of returned posts is also returned in the response.
      the maximum number is 100 and is always counted from the start index.
      ultimately, one can use tags and key words, therefore the search service is implemented by this request. (not available)
    url: /posts/cloud
    http method: GET
    header:
      - community # optional. default: all communities.
      - is related to user # this can only be used when the token given in the header is authenticated. note that this service can be used anonymously.
      - start date # optional. default: dawn of time :).
      - end date # optional. default: now.
      - start index # optional. default: 0.
      - end index # optional. default: foundPosts.length.
    parameters:
      - tags array (currently not available)
      - key words array
    response:
      - error message # only if an error occurs
      - number of posts returned
      - array of basic information of questions

---

user actions management services:
  ask a question:
    service description: used to ask a new question in a community.
    url: /user/actions/ask
    http method: POST
    header:
      - token # request would resolve only upon authentication.
      - community
    parameters:
      - title
      - question body
      - tags array (currently not available)
    response:
      - error message # only if an error occurs

  answer a question:
    service description: used to answer a question.
    url: user/actions/answer
    http method: POST
    header:
      - token # request would resolve only upon authentication.
      - question id
    parameters:
      - answer body
    response:
      - error message # only if an error occurs

  comment on a post:
    service description: used to comment on a post
    url: user/actions/comment/on_post
    http method: POST
    header:
      - token # request would resolve only upon authentication.
      - post id
    parameters:
      - comment body
    response:
      - error message # only if an error occurs

  comment on a comment:
    service description: used to comment on a comment
    url: user/actions/comment/on_comment
    http method: POST
    header:
      - token # request would resolve only upon authentication.
      - comment id
    parameters:
      - comment body
    response:
      - error message # only if an error occurs