# This file is devoted to specifying an API between front-end and back-end.
# some notes about this file:
#   * data structures passed in the body of requests and responses should be serialized in "yaml" format
#   * at any point, if you felt that you need to add something (additional info or sth like that),
#     feel free to add it here with a TODO tag!
#   * keep in mind that in all of the requests (whether its mentioned or not) one should specify two fields in header:
#     1- user token: if you have one, you should always send it with each request. otherwise the key value may not exist.
#         Authorization: Bearer <Token>

community service:
  get all communities:
    service description: returns the id,name key value of all available communities.
    url: /communities/all
    http method: GET
    header: [] # non required
    parameters: [] # non required
    response:
      - error message # only if an error occurs
      - array of community names

  create new community:
    service description: privileged users (most likely admins) can use this to crate a new community.
    url: /communities/new
    http method: POST
    header: [token] # only admin would be authorized
    parameters:
      - community name
      - description
    response:
      - error message # only if an error occurs

---

post service:
  get basic information of a question:
    service description: returns basic info (info used to create a summary of a post i.e in home pages).
    url: /posts/questions/$id/basic_info # $id is a variable indicating the question's id
    http method: GET
    header: [] # non required
    parameters: [] # non required
    response:
      - error message # only if an error occurs
      - isAnswerApproved
      - asker id
      - asker name
      - question id
      - question title
      - question body
      - number of downvotes
      - number of upvotes
      - date of issue
      - tags array
      - number of answers

  get answers of a question:
    service description: returns an array of answer's basic infos plus basic info of the question itself.
    url: /posts/questions/$id/answers # $id is a variable indicating the question's id
    http method: GET
    header: [] # non required
    parameters: [] # non required
    reponse:
      - error message # only if an error occurs
      - question basic info
      - array of basic information of answers

  get basic informations of an answer:
    service description: returns information required to create an answer's post.
    url: /posts/answers/$id # $id is a variable indicating the answer's id
    http method: GET
    header: [] # non required
    parameters: [] #non required
    response:
      - error message # only if an error occurs
      - user's id
      - user's username
      - answer's body
      - number of upvotes
      - number of downvotes
      - was answer helpful
      - date of issue

  # needs revisions. the aim is to make this service -
  # the only service used for retrieving a group of posts.
  get a group of posts:
    service description: |
      returns a cloud of posts, which can be sorted in a specific way. (not available)
      also there can be specified wether the posts should relate to a community/user. (not available)
      also one can specify an Interval by which the posts can be filtered. (not available)
      there is also a 0-based indexing property (from $start inclusive, until $end exclusive),
      by which you can repeat the same query but get a different interval of posts (index-wise). (not available)
      * note that the number of returned posts is also returned in the response.
      the maximum number is 100 and is always counted from the start index.
      ultimately, one can use tags and key words, therefore the search service is implemented by this request. (not available)
    url: /posts/cluster
    http method: GET
    header: [] # non required
    parameters:
      - community # optional. default: all communities.
      - is related to user # this can only be used when the token given in the header is authenticated. note that this service can be used anonymously.
      - start date # optional. default: dawn of time :).
      - end date # optional. default: now.
      - start index # optional. default: 0.
      - end index # optional. default: foundPosts.length.
      - tags array (currently not available)
      - key words array
    response:
      - error message # only if an error occurs
      - number of posts returned
      - array of basic information of questions
---

user service:
  ask a question:
    service description: used to ask a new question in a community.
    url: /user/actions/ask
    http method: POST
    header:
      - token # request would resolve only upon authentication.
    parameters:
      - community
      - title
      - question body
      - tags array (currently not available)
    response:
      - error message # only if an error occurs

  answer a question:
    service description: used to answer a question.
    url: /user/actions/answer
    http method: POST
    header:
      - token # request would resolve only upon authentication.
    parameters:
      - answer body
      - question id
    response:
      - error message # only if an error occurs

  comment on a question:
    service description: used to comment on a question
    url: /user/actions/comment/on_question
    http method: POST
    header:
      - token # request would resolve only upon authentication.
    parameters:
      - comment body
      - question id
    response:
      - error message # only if an error occurs

  comment on an answer :
    service description: used to comment on an answer
    url: /user/actions/comment/on_answer
    http method: POST
    header:
      - token # request would resolve only upon authentication.
    parameters:
      - comment body
      - answer id
    response:
      - error message # only if an error occurs

  comment on a comment:
    service description: used to comment on a comment
    url: /user/actions/comment/on_comment
    http method: POST
    header:
      - token # request would resolve only upon authentication.
    parameters:
      - parent comment id
      - new comment body
    response:
      - error message # only if an error occurs

  signup:
    service description: used to create a new user in the system.
    url: /user/signup
    http method: POST
    header: [] # non required
    parameters:
      - username
      - password
      - email
      - student number
      - first name
      - last name
    response:
      - error message # only if an error occurs
      - JWT token

    login:
      service description: provides logging-in service.
      url: /user/login
      http method: POST
      header: [] # non required
      parameters:
        - username
        - password
      response:
        - error message # only if an error occurs
        - JWT token

    logout:
      service description: logs-out the authenticated user. the given token is no longer valid.
      url: /user/logout
      http method: POST
      header: [token]
      parameters: [] # non required
      response:
        - error message # only if an error occurs

    user profile:
      service description: |
        returns the basic information of the user.
        essentially the same info used to create the profile info page.
        if the user asks for their own username, their own profile info would be returned
        if the user for another user profile, slightly different info would be returned
      url: /user/profile
      http method: GET
      header: [token] # non required
      parameters: [username] # can later be changed to user ID
      response:
        - error message # only if an error occurs
        - is for own # specifies whether if the user asked for their own page or not
        - username
        - first name
        - last name
        - email
        - student number
        - profile image (not available)
        - about me

    get user posts:
      service description: returns the posts that user asked and/or answered on.
      url: /user/posts
      http method: GET
      header: [] # non required
      parameters:
        - error message # only if an error occurs
        - username # can later be changed to user ID
        - option (q | a | all) # specifies the posts to return: q => asked only, a => answered only, all => both.
      response:
        - an array of posts (post basic info)

---

tag service:
  get list of tags:
    service description: |
     used to retrieve available tags. because upon issuing a question, only valid tags are allowed.
     you can also pass a keyword by which tags would be filtered. only tags with a meaningfull distance from the keyword would be returned.
    url: /tags
    http method: GET
    header: [] # non required
    parameters:
      - keyword
    response:
      - error message # only if an error occurs
      - tag array

  create a new tag:
    service description: used to create a new tag. this service is only available to the users with a certain minimum amount of reputation (will be specified later)
    url: /tags/new
    http method: POST
    header: [token] # need authorization
    parameters:
      - tag name
    response:
      - error message # only if an error occurs

#TODO : get user reputation log 
     #header including start date, end date, start index, end index and their default values
     #response : total reputation, list of reputation logs
